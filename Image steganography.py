# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JX06FlXqoF3ce-9cnZT1oO8m7g7T1lxd
"""

!apt-get install -y xvfb
!pip install pyvirtualdisplay
!pip install opencv-python-headless numpy pillow ipywidgets matplotlib

from ipywidgets import (VBox, HBox, Tab, FileUpload, Dropdown, Button,
                        Output, Label, Layout, HTML)
from IPython.display import display, clear_output
import cv2
import numpy as np
import matplotlib.pyplot as plt
from pyvirtualdisplay import Display

# Start virtual display for Colab
disp = Display(visible=0, size=(800, 600))
disp.start()

# Custom styling
display(HTML("""
<style>
.widget-label { min-width: 150px !important; }
.preview-img { max-width: 300px; margin: 10px; border: 2px solid #007bff; }
h1 { color: #2c3e50; text-align: center; font-size: 24px; }
button { font-size: 16px !important; font-weight: bold; }
</style>
"""))

# Initialize widgets
upload_carrier = FileUpload(description="üì§ Carrier Image", multiple=False)
upload_secret = FileUpload(description="üì§ Secret Image", multiple=False)
bits_selector = Dropdown(options=[3, 4], value=4, description='üî¢ LSB Bits:')
encode_btn = Button(description="üîí Encode & Hide", button_style='success')
download_encoded = Button(description="‚¨áÔ∏è Download Encoded", disabled=True)

upload_encoded = FileUpload(description="üì§ Upload Encoded Image", multiple=False)
decode_btn = Button(description="üîì Decode & Reveal", button_style='info')
download_decoded = Button(description="‚¨áÔ∏è Download Decoded", disabled=True)

preview_output = Output()
status_output = Output()

# Create interface
tabs = Tab(children=[
    VBox([
        HTML("<h3>üîπ Encode Image</h3>"),
        bits_selector,
        HBox([upload_carrier, upload_secret]),
        encode_btn,
        download_encoded
    ], layout=Layout(align_items="center")),

    VBox([
        HTML("<h3>üîπ Decode Image</h3>"),
        upload_encoded,
        decode_btn,
        download_decoded
    ], layout=Layout(align_items="center"))
])

tabs.set_title(0, "üîê Encode")
tabs.set_title(1, "üîì Decode")

# Image Display Function
def show_image(img, title):
    plt.figure(figsize=(6, 4))
    if len(img.shape) == 3:
        plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    else:
        plt.imshow(img, cmap='gray')
    plt.title(title)
    plt.axis('off')
    plt.show()

# Encoding Function
def process_encode(b):
    with status_output:
        clear_output()
        try:
            # Read images
            carrier = cv2.imdecode(np.frombuffer(
                next(iter(upload_carrier.value.values()))['content'],
                np.uint8), cv2.IMREAD_COLOR)
            secret = cv2.imdecode(np.frombuffer(
                next(iter(upload_secret.value.values()))['content'],
                np.uint8), cv2.IMREAD_COLOR)

            # Resize secret to match carrier
            secret = cv2.resize(secret, (carrier.shape[1], carrier.shape[0]))

            # Process each color channel
            bits = bits_selector.value
            mask = 0xFF ^ ((1 << bits) - 1)
            encoded = np.zeros_like(carrier)

            for c in range(3):  # BGR channels
                encoded[:,:,c] = ((carrier[:,:,c] & mask) |
                                 (secret[:,:,c] >> (8 - bits)))

            # Save and update UI
            global ENCODED_PATH
            ENCODED_PATH = '/content/encoded.png'
            cv2.imwrite(ENCODED_PATH, encoded)

            with preview_output:
                clear_output()
                print("üñºÔ∏è Encoded Preview:")
                show_image(encoded, "Encoded Image")

            download_encoded.disabled = False
            print("‚úÖ Encoding successful! Secret hidden in color channels.")

        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

# Decoding Function
def process_decode(b):
    with status_output:
        clear_output()
        try:
            # Read encoded image
            encoded = cv2.imdecode(np.frombuffer(
                next(iter(upload_encoded.value.values()))['content'],
                np.uint8), cv2.IMREAD_COLOR)

            # Process each color channel
            bits = bits_selector.value
            mask = (1 << bits) - 1
            decoded = np.zeros_like(encoded)

            for c in range(3):  # BGR channels
                channel = encoded[:,:,c].astype(np.uint16)
                decoded[:,:,c] = np.clip((channel & mask) << (8 - bits), 0, 255)

            # Save and update UI
            global DECODED_PATH
            DECODED_PATH = '/content/decoded.png'
            cv2.imwrite(DECODED_PATH, decoded)

            with preview_output:
                clear_output()
                print("üïµÔ∏è Decoded Secret:")
                show_image(decoded, "Revealed Secret")

            download_decoded.disabled = False
            print("üîé Decoding successful! Secret recovered with colors.")

        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

# Function to download file
def download_file(path):
    from google.colab import files
    files.download(path)

# Connect widgets
encode_btn.on_click(process_encode)
decode_btn.on_click(process_decode)
download_encoded.on_click(lambda _: download_file(ENCODED_PATH))
download_decoded.on_click(lambda _: download_file(DECODED_PATH))

# Display interface
display(VBox([
    HTML("<h1>üé® Color Image Steganography</h1>"),
    tabs,
    preview_output,
    status_output
], layout=Layout(align_items="center")))